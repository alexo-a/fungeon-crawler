{"version":3,"sources":["components/Square/index.js","utils/actions.js","utils/reducers.js","utils/GameData/calculations.js","utils/GameData/Player.js","utils/GlobalState.js","components/Map/index.js","components/Footer/index.js","pages/Game.js","App.js","index.js","utils/GameData/Items.js"],"names":["Square","x","y","classNames","handleClick","hitpointsRemainingDecimal","roundedPercentRemaining","Math","round","roundedPercentLost","toString","className","onClick","event","MOVE_ENTITY","TOGGLE_MOVEMENT_MODE","END_TURN","TOGGLE_ATTACK_MODE","reducer","state","action","type","tmpEntities","entities","changedEntity","whoseTurn","movementMode","position","newPosition","movementRemaining","forceRender","tempMovementMode","setMovement","tempAttackMode","setAttackMode","attackMode","console","log","name","newEntities","nextTurnIndex","length","speed","tempState","entityIndex","entity","roll","dice","ceil","random","alert","calculateDistance","target","currentPosition","floor","sqrt","pow","Player","isNPC","this","activeGear","prototype","getStats","maxHitpoints","currentHitpoints","initiative","armor","hitBonus","visibilityRange","sneakBonus","trapDisableBonus","agility","activeWeapon","equippedGear","setStats","stats","chanceToFlee","aggroRange","setMovementRemaining","newValue","setInventory","contents","inventory","getInventory","equipWeapon","weapon","quantity","class","equipGear","item","torso","neck","head","hands","back","getWeapon","getHitpoints","isAlive","reduceHitpoints","damage","max","getAttackValue","min","strength","addPotion","potion","push","usePotion","index","getPosition","setPosition","getName","willFlee","StoreContext","createContext","Provider","geraldo","Items","gold","shortbow","boblin","shortsword","godCape","worthlessCape","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","Map","gridSize","squares","playersTurn","playerMoving","player","hostilePositions","doPositionsMatch","positionOne","positionTwo","targetPosition","parseInt","getAttribute","parentElement","attemptedMoveDistance","movePossible","attackValid","targetMobIndex","i","range","attacker","hitRoll","hitSum","gearArmorSum","Object","entries","defenceSum","damageDone","attackTarget","remainingHitpointsDisplay","undefined","classes","map","row","sq","Footer","playerIndex","Game","useEffect","$","css","App","ReactDOM","render","StrictMode","document","getElementById","module","exports","weight","leatherArmor","defenseAmulet"],"mappings":"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","file":"static/js/main.a795532e.chunk.js","sourcesContent":["import React from 'react';\n//import { useStoreContext } from '../../utils/GlobalState';\n\nfunction Square({x,y, classNames, handleClick, hitpointsRemainingDecimal}) {\n    let roundedPercentRemaining = typeof hitpointsRemainingDecimal === \"undefined\" ? \"0\" : Math.round((hitpointsRemainingDecimal*10));\n    let roundedPercentLost = typeof hitpointsRemainingDecimal === \"undefined\" ? \"0\" : ((10-roundedPercentRemaining)*10).toString();\n    return (\n        <div className={classNames} onClick={(event) => { handleClick(event) }} x={x} y={y}>\n            <div className=\"hitpointsBar\">\n                <div className={`hitpointsRemaining w${(roundedPercentRemaining*10).toString()}`}>\n\n                </div>\n                <div className={`hitpointsLost w${roundedPercentLost}`}>\n\n                </div>\n            </div>\n            <div className=\"img-loc\">\n\n                {/*{x}, {y}*/}\n            </div>\n        </div>\n    );\n};\n\nexport default Square;","export const MOVE_ENTITY = \"MOVE_ENTITY\";\nexport const FORCE_RENDER = \"FORCE_RENDER\";\nexport const TOGGLE_MOVEMENT_MODE = \"TOGGLE_MOVEMENT_MODE\";\nexport const END_TURN = \"END_TURN\";\nexport const TOGGLE_ATTACK_MODE = \"TOGGLE_ATTACK_MODE\";\nexport const UPDATE_ENTITY_STATS = \"UPDATE_ENTITY_STATS\";\n","import { useReducer } from 'react';\n\nimport {\n    FORCE_RENDER,\n    MOVE_ENTITY,\n    TOGGLE_MOVEMENT_MODE,\n    END_TURN,\n    TOGGLE_ATTACK_MODE,\n    UPDATE_ENTITY_STATS\n} from './actions';\n\nexport const reducer = (state, action) => {\n    \n\tswitch (action.type) {\n        case MOVE_ENTITY:\n            let tmpEntities= [...state.entities];\n            let changedEntity=state.entities[state.whoseTurn];\n            let movementMode = true;\n            changedEntity.position=action.newPosition;\n            changedEntity.movementRemaining=action.movementRemaining\n            tmpEntities[state.whoseTurn]=changedEntity;\n            if (changedEntity.movementRemaining === 0) { movementMode = false}\n            return {\n                ...state, \n                entities: tmpEntities,\n                movementMode:movementMode\n            }\n        case FORCE_RENDER:\n            return {\n                ...state,\n                forceRender: action.forceRender\n            }\t\n        case TOGGLE_MOVEMENT_MODE:\n            let tempMovementMode;\n            if (typeof action.setMovement === \"undefined\"){\n                tempMovementMode = state.movementMode;\n                if (state.entities[state.whoseTurn].movementRemaining > 0){ tempMovementMode = !tempMovementMode}\n                //console.log(action.setMovement)\n            }\n            else {\n                tempMovementMode = action.setMovement\n            }\n            return {\n                ...state,\n                movementMode: tempMovementMode\n            }\t\n        case TOGGLE_ATTACK_MODE:\n            let tempAttackMode;\n            if (typeof action.setAttackMode === \"undefined\") {\n                tempAttackMode = !state.attackMode;\n            }\n            else {\n                tempAttackMode = action.setAttackMode\n            }\n            return {\n                ...state,\n                attackMode: tempAttackMode\n            }\n        case END_TURN:\n            console.log(`end of ${state.entities[state.whoseTurn].name}'s turn`)\n            let newEntities = [...state.entities];\n            let nextTurnIndex=0;\n            if ( state.whoseTurn < state.entities.length - 1 ) { nextTurnIndex = state.whoseTurn + 1 }\n            console.log(`start of ${state.entities[nextTurnIndex].name}'s turn`)\n            if (nextTurnIndex === 0 ){\n                for ( let x = 0; x < newEntities.length; x++){\n                    newEntities[x].movementRemaining = newEntities[x].speed\n                }\n            }\n            return {\n                ...state,\n                movementMode: false,\n                whoseTurn: nextTurnIndex,\n                entities: nextTurnIndex === 0 ? newEntities : state.entities,\n                round: nextTurnIndex === 0 ? state.round++ : state.round\n            }\n        case UPDATE_ENTITY_STATS:\n            let tempState = state;\n            tempState[action.entityIndex] = action.entity\n            return {\n                ...tempState\n            }\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nexport function useFungeonCrawlerReducer(initialState) {\n\treturn useReducer(reducer, initialState);\n}","export function roll(dice){\n    switch (dice){\n        case 100:\n            return Math.ceil(Math.random() * 100)\n        case 20: \n            return Math.ceil(Math.random() * 20)\n        case 12:\n            return Math.ceil(Math.random() * 12)\n\n        case 10:\n            return Math.ceil(Math.random() * 10)\n\n        case 8:\n            return Math.ceil(Math.random() * 8)\n\n        case 6:\n            return Math.ceil(Math.random() * 6)\n\n        case 4:\n            return Math.ceil(Math.random() * 4)\n        default:\n            alert(`${dice} isn't a valid dice option`)\n    }\n}\n\nexport function calculateDistance (target, currentPosition) {\n    return Math.floor(Math.sqrt(Math.pow(target.x - currentPosition.x, 2) + Math.pow(target.y - currentPosition.y, 2)))\n}\n\nexport function attackTarget(attacker, target){\n    //calculate if it's a hit\n    let hitRoll = roll(20)\n    console.log(`${attacker.name}'s raw hit roll: ${hitRoll}`)\n    let hitSum = attacker.hitBonus + attacker.agility + hitRoll\n    let gearArmorSum = 0;\n    for (const [slot, item] of Object.entries(target.activeGear)) {\n        gearArmorSum += item.armor;\n    }\n    let defenceSum = target.armor + gearArmorSum;\n    console.log(`${attacker.name} rolls a ${hitSum} vs. ${target.name}'s armor of ${defenceSum}`)\n    if (hitSum >= defenceSum){\n        let damageDone = roll(attacker.activeWeapon.damage)\n        target.reduceHitpoints(damageDone);\n        console.log(`attack hit! ${attacker.name} does ${damageDone} damage. ${target.getHitpoints()}`)\n        if(!target.isAlive()){\n            console.log(`${target.name} died :(`)\n        }\n    }\n    else {console.log(\"**whoosh** (attack missed)\")}\n}","import {roll} from \"./calculations\"\n\nfunction Player(name, isNPC = true) {\n    this.name = name;\n    this.isNPC = isNPC;\n    this.activeGear={};\n}\n\nPlayer.prototype.getStats = function () {\n    return {\n        maxHitpoints: this.maxHitpoints,\n        currentHitpoints: this.currentHitpoints,\n        initiative: this.initiative,\n        speed: this.speed,\n        armor: this.armor,\n        hitBonus: this.hitBonus,\n        visibilityRange: this.visibilityRange,\n        sneakBonus: this.sneakBonus,\n        trapDisableBonus: this.trapDisableBonus,\n        agility: this.agility,\n        movementRemaining: this.movementRemaining,\n        position: this.position,\n        activeWeapon: this.activeWeapon,\n        equippedGear: this.equippedGear\n    };\n};\n\nPlayer.prototype.setStats = function (stats) {\n    this.currentHitpoints = stats.currentHitpoints || 15;\n    this.maxHitpoints = stats.maxHitpoints || 15;\n    this.initiative = stats.initiative || 0;\n    this.speed = stats.speed || 5;\n    this.armor = stats.armor || 12;\n    this.hitBonus = stats.hitBonus || 0;\n    this.visibilityRange = stats.visibilityRange || 10;\n    this.sneakBonus = stats.sneakBonus || 0;\n    this.trapDisableBonus = stats.trapDisableBonus || 0;\n    this.agility = stats.agility || 0;\n    //chanceToFlee will be the % chance of an npc fleeing if brought below 50% hitpoints\n    this.chanceToFlee = stats.chanceToFlee || 5;\n    this.aggroRange = stats.aggroRange || 2;\n};\n\nPlayer.prototype.setMovementRemaining = function(newValue){\n    this.movementRemaining = newValue || this.speed\n}\n\nPlayer.prototype.setInventory = function (contents) {\n    this.inventory = contents;\n    return this.inventory;\n}\n\nPlayer.prototype.getInventory = function () {\n    if (this.inventory.length) {\n        return this.inventory;\n    }\n    return false;\n};\n\nPlayer.prototype.equipWeapon = function(weapon){\n    //weapon must be in inventory\n    for (let x = 0; x < this.inventory.length; x++ ){\n        if (this.inventory[x].name === weapon.name && this.inventory[x].quantity >= 1){\n            if (weapon.class === \"weapon\") {\n                this.activeWeapon = weapon;\n            }\n            break;\n        }\n    }\n}\n\nPlayer.prototype.equipGear = function(item){\n    //item must be in inventory\n    for (let x = 0; x < this.inventory.length; x++) {\n        if (this.inventory[x].name === item.name && this.inventory[x].quantity >= 1) {\n            switch (item.class){\n                case \"torso\":\n                    this.activeGear.torso = item;\n                    break;\n                case \"neck\":\n                    this.activeGear.neck = item;\n                    break;\n                case \"head\":\n                    this.activeGear.head = item;\n                    break;\n                case \"hands\":\n                    this.activeGear.hands = item;\n                    break;\n                case \"back\":\n                    this.activeGear.back = item;\n                    break;\n                default:\n                    alert(\"not an active gear item. needs to be of class torso/neck/head/hands/back\")\n\n            }\n        }\n    }\n}\n\nPlayer.prototype.getWeapon = function(){\n    return this.activeWeapon;\n}\n\nPlayer.prototype.getHitpoints = function () {\n    return `${this.name}'s health is now ${this.currentHitpoints}!`;\n};\n\nPlayer.prototype.isAlive = function () {\n    if (this.currentHitpoints <= 0) {\n        return false;\n    }\n    return true;\n};\n\nPlayer.prototype.reduceHitpoints = function (damage) {\n    this.currentHitpoints -= damage;\n    this.currentHitpoints = Math.max(this.currentHitpoints, 0)\n};\n\nPlayer.prototype.getAttackValue = function () {\n    const min = this.strength - 5;\n    const max = this.strength + 5;\n\n    return Math.floor(Math.random() * (max - min) + min);\n};\n\nPlayer.prototype.addPotion = function (potion) {\n    this.inventory.push(potion);\n};\n\nPlayer.prototype.usePotion = function (index) {\n\n};\n\nPlayer.prototype.getPosition = function (){\n    return this.getPosition;\n}\n\nPlayer.prototype.setPosition = function(position){\n    this.position = position\n}\n\n\nPlayer.prototype.getName = function () {\n    return this.name;\n}\n\nPlayer.prototype.willFlee = function () {\n    if (this.currentHitpoints < this.maxHitpoints && (this.currentHitpoints / this.maxHitpoints) <= 0.5 && roll(20) <= this.chanceToFlee){\n        return true;\n    }\n    return false;\n};\n\nexport default  Player;\n","import React, { createContext, useContext } from \"react\";\nimport { useFungeonCrawlerReducer } from './reducers';\nimport Player from \"./GameData/Player\"\nimport Items from \"./GameData/Items\"\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst geraldo = new Player(\"Geraldo\");\ngeraldo.setStats({speed: 5, hitBonus: 2, isNPC: false})\ngeraldo.setPosition({ x: 9, y: 9 })\ngeraldo.setInventory([{...Items.gold, quantity: 150}, {...Items.shortbow, quantity: 1}])\ngeraldo.setMovementRemaining()\ngeraldo.equipWeapon(Items.shortbow)\n\nconst boblin = new Player(\"Boblin\");\nboblin.setStats({ speed: 5, isNPC: true})\nboblin.setPosition({ x: 4, y: 4 })\nboblin.setInventory([{ ...Items.gold, quantity: 150 }, { ...Items.shortsword, quantity: 1 }, { ...Items.godCape, quantity: 1 }, { ...Items.worthlessCape, quantity: 1 }])\nboblin.setMovementRemaining()\nboblin.equipWeapon(Items.shortsword)\nboblin.equipGear(Items.godCape)\nboblin.equipGear(Items.worthlessCape)\n\nconst StoreProvider = ({ value = [], ...props }) => {\n    // Set default state here.\n    const [state, dispatch] = useFungeonCrawlerReducer({\n        entities: [geraldo, boblin],\n        whoseTurn: 0,\n        movementMode: false,\n        round: 0,\n        attackMode: false\n    });\n    return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n    return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };","import React  from 'react';\nimport Square from \"../Square\";\nimport { useStoreContext } from '../../utils/GlobalState';\n//import util from \"util\";\nimport { MOVE_ENTITY, TOGGLE_ATTACK_MODE } from \"../../utils/actions\"\nimport {calculateDistance, attackTarget} from \"../../utils/GameData/calculations\"\n\nconst playerIndex=0;\n\n\nfunction Map({gridSize=10}) {\n    let squares = [];\n    let [state, dispatch] = useStoreContext();\n    const playersTurn = state.whoseTurn===playerIndex;\n    let playerMoving = state.entities[0].movementRemaining > 0;\n    let player = state.entities[playerIndex];\n    let hostilePositions = []\n    //const playerSpeed = state.entities[0].speed;\n\n\n\n    \n    function doPositionsMatch(positionOne, positionTwo){\n        return positionOne.x === positionTwo.x && positionOne.y === positionTwo.y\n    }\n    for (let x = 0; x < state.entities.length; x++){\n        if (x!==playerIndex){\n            /*if (state.entities[x].hitpoints <= 0){\n                hostilePositions.push({x: null, y: null})\n            }\n            else { */\n                hostilePositions.push(state.entities[x].position)\n            //}\n        }\n        else {hostilePositions.push({x:null, y:null})}\n    }\n\n    const handleClick = event => {\n        const targetPosition = { \n            x: parseInt(event.target.getAttribute(\"x\") || event.target.parentElement.getAttribute(\"x\")), \n            y: parseInt(event.target.getAttribute(\"y\") || event.target.parentElement.getAttribute(\"y\")) \n        }\n\n        if (state.movementMode) {\n            console.log(`${state.entities[state.whoseTurn].name} is attempting to move to (${targetPosition.x}, ${targetPosition.y})`)\n            const attemptedMoveDistance = calculateDistance({ x: targetPosition.x, y: targetPosition.y }, state.entities[state.whoseTurn].position)\n\n            if (state.entities[state.whoseTurn].movementRemaining >= attemptedMoveDistance) {\n                let movePossible = true;\n                for (let x = 0; x < state.entities.length; x++) {\n                    if (doPositionsMatch(targetPosition,state.entities[x])){//targetPosition.x === state.entities[x].position.x && targetPosition.y === state.entities[x].position.y) {\n                        movePossible = false;\n                        break;\n                    }\n                }\n\n                if (movePossible) {\n                    console.log(\"move was successful\")\n                    dispatch({\n                        type: MOVE_ENTITY,\n                        newPosition: {\n                            x: targetPosition.x,\n                            y: targetPosition.y\n                        },\n                        movementRemaining: state.entities[state.whoseTurn].movementRemaining - attemptedMoveDistance\n                    })\n                }\n                else {\n                    console.log(\"move didn't work\")\n                }\n            }\n            //console.log(util.inspect(state, true, null, false))\n            //console.log(`${state.entities[state.whoseTurn].name} is now at (${state.entities[state.whoseTurn].position.x}, ${state.entities[state.whoseTurn].position.y})`)\n        }\n        else if (state.attackMode) {\n            let attackValid = false;\n            let targetMobIndex = null;\n            console.log(`attempting to attack mob at ${targetPosition.x}, ${targetPosition.y}`)\n            for (let i = 0; i < hostilePositions.length; i++) {\n                if (doPositionsMatch(hostilePositions[i], targetPosition)){\n                    //hostilePositions[i].x === targetPosition.x && hostilePositions[i].y === targetPosition.y) {\n                    targetMobIndex=i;\n                    attackValid=true;\n                }\n            } \n\n            attackValid = attackValid && calculateDistance(targetPosition,state.entities[playerIndex].position)  <= state.entities[playerIndex].activeWeapon.range\n            if (attackValid){\n                console.log(\"attack was valid\")\n                attackTarget(state.entities[playerIndex], state.entities[targetMobIndex]);\n                //I don't think I need this first dispatch. Is it because there's a dispatch immediately afterwards that updates it anyway? I think so...\n                /*\n                dispatch({\n                    type: UPDATE_ENTITY_STATS,\n                    entity: newMobData,\n                    entityIndex: targetMobIndex\n                });*/\n                dispatch({\n                    type: TOGGLE_ATTACK_MODE,\n                    setAttackMode: false\n                });\n            }\n        }\n    };\n\n    //console.log(state)\n\n    for (let y = 0; y < gridSize; y++) {\n        squares.push([])\n        for (let x = 0; x < gridSize; x++) {\n            let remainingHitpointsDisplay = undefined;\n            let classes = \"square\";\n            //if (x===9){console.log(player.position); console.log({x,y})}\n            if (doPositionsMatch(player.position, { x, y })) { classes = \"square activePlayer\"; remainingHitpointsDisplay = state.entities[playerIndex].currentHitpoints / state.entities[playerIndex].maxHitpoints}\n            //else if (enemyPosition.x === x && enemyPosition.y === y) { classes = \"square mob\" }\n            \n            else if (playersTurn && playerMoving && calculateDistance({x,y},player.position) <= player.movementRemaining && state.movementMode) { classes = \"square green\" }\n            \n            //if (playersTurn && calculateDistance({x,y},player.position) <= player.activeWeapon.range ){\n                for (let i = 0; i < hostilePositions.length; i++){\n                    if (doPositionsMatch(hostilePositions[i],{x,y})){\n                        //if player's turn and attack mode and within wep range\n                        if (state.whoseTurn === playerIndex && state.attackMode && calculateDistance({ x, y }, player.position) <= player.activeWeapon.range) { classes = \"square mob red-background\"; remainingHitpointsDisplay = state.entities[i].currentHitpoints / state.entities[i].maxHitpoints}\n                        \n                        \n                        //else if mob is alive\n                        else if (state.entities[i].isAlive()) { classes = `square mob`; remainingHitpointsDisplay = state.entities[i].currentHitpoints / state.entities[i].maxHitpoints}\n                        \n                        //else \n                        else { classes = \"square dead-mob\"}\n                        \n                    }\n                }\n            //}\n            squares[y].push(<Square x={x} y={y} classNames={classes} key={x.toString() + y.toString()} handleClick={(event) => { handleClick(event) }} hitpointsRemainingDecimal={remainingHitpointsDisplay} />)\n        }\n    }\n\n    //console.log(util.inspect(state, true, null, false))\n    return (\n        <>\n            {squares.map((row, index) => {\n                return (\n                    <div className=\"map-row\" key={\"row\"+ index.toString() }>\n                        {row.map(sq => {\n                            return (sq)\n                        })}\n                    </div>\n                )\n            })}\n        </>\n    )\n}\n\nexport default Map;","import React from 'react';\nimport { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_MOVEMENT_MODE, END_TURN, TOGGLE_ATTACK_MODE } from \"../../utils/actions\"\n//import { attackTarget } from '../../utils/GameData/calculations';\n\nfunction Footer({ playerIndex }) {\n    const [state, dispatch] = useStoreContext();\n\n    function toggleMove() {\n        dispatch({ type: TOGGLE_MOVEMENT_MODE })\n    }\n\n    function endTurn() {\n        dispatch({ type: END_TURN })\n    }\n    function attack(){\n        dispatch({ type: TOGGLE_MOVEMENT_MODE,\n            setMovement: false })\n        dispatch({type: TOGGLE_ATTACK_MODE})\n    }\n    return (\n        <div className=\"footer\">\n            <div>\n                {playerIndex === state.whoseTurn ?\n                    \"Your Turn!\"\n                    : \"Their turn, please wait.\"}\n            </div>\n            {\n                state.whoseTurn === playerIndex ? (\n                <>\n                    <div>\n                        {`${state.entities[state.whoseTurn].name} has ${state.entities[state.whoseTurn].movementRemaining} movement remaining`}\n                    </div>\n                    <button className={state.entities[state.whoseTurn].movementRemaining > 0 ? \"\" : \"disabled\"} onClick={function () { toggleMove() }}>{state.movementMode ? \"Moving\" : \"Move\"}</button>\n                        <button onClick={function () { attack() }}>{state.attackMode ? \"ATTACKING!!\" : \"Attack\"}</button>\n                    <button onClick={function () { endTurn() }}>End Turn</button>\n                </>\n                )\n                : null\n            }\n\n        </div>\n    )\n\n}\n\nexport default Footer","import React, {useEffect} from \"react\";\nimport Map from \"../components/Map\"\nimport Footer from \"../components/Footer\"\nimport { useStoreContext } from '../utils/GlobalState';\nimport $ from \"jquery\"\n//import Player from \"./utils/GameData/Player\"\n//import { roll, attackTarget } from \"../utils/GameData/calculations\"\nconst playerIndex = 0;\nconst gridSize = 15\nfunction Game(){\n\n    let [state, dispatch] = useStoreContext();\n    if (state.whoseTurn !== playerIndex){\n        //AI turn\n        let mob = state.entities[state.whoseTurn];\n        /*if (mob.isAlive()){\n            if (mob.fleeMode()){\n\n\n            }\n        }*/\n    }\n    useEffect(()=> {\n        $(\".square\").css(\"height\", `min(10vw, calc((100vh - 100px)/${gridSize}),calc(100vw/${gridSize}))`);\n        $(\".square\").css(\"width\", `min(10vw, calc((100vh - 100px)/${gridSize}),calc(100vw/${gridSize}))`)\n    })\n\n    return (\n        <>\n        <div className=\"game\">\n            <div className=\"Map\">\n                    <Map gridSize={gridSize} />\n            </div>\n        </div>\n        \n        {/* will need to figure out how to correctly get playerIndex here later. */}\n        <Footer playerIndex={playerIndex}></Footer>\n        </>\n    )\n}\n\nexport default Game;","import './App.css';\nimport Game from \"./pages/Game\"\n\nimport { StoreProvider } from './utils/GlobalState';\n\nfunction App() {\n\n    return (\n        <div className=\"App\">\n            <StoreProvider>\n                <header className=\"App-header\">\n                </header>\n                <Game></Game>\n                \n            </StoreProvider>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n","const Items = {\n    gold: { name: \"gold\", class: \"money\", weight: .01, value: 1 },\n    shortsword: { name: \"shortsword\", class: \"weapon\", weight: 2, damage: 6, value: 20, range: 1 },\n    shortbow: { name: \"shortbow\", class: \"weapon\", weight: 2, damage: 6, value: 15, range: 5},\n    leatherArmor: { name: \"leatherArmor\", class: \"torso\", weight: 7, armor: 2, value: 15 },\n    defenseAmulet: { name: \"defenseAmulet\", class: \"neck\", weight: 0.5, armor: 1, value: 150 },\n    godCape: { name: \"godCape\", class: \"back\", weight: 9, armor: 99, value: 1 },\n    worthlessCape: { name: \"worthlessCape\", class: \"back\", weight: 9, armor: 0, value: 1 }\n}\n\nmodule.exports = Items;"],"sourceRoot":""}